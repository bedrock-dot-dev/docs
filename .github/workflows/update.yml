name: Check for docs updates

on:
  workflow_dispatch: {}
  schedule:
    # run this during the week, tuesday to friday
    # at 9:10am, 9:10pm
    # Redmond time (UTC-7)
    - cron: '10 16,4 * * 2-5'

jobs:
  check:
    if: github.repository == 'bedrock-dot-dev/docs'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: denolib/setup-deno@master
        with:
          deno-version: 1.2.3
      - name: Setup git environment
        run: |
          git config --global user.name 'destruc7i0n'
          git config --global user.email 'destruc7i0n@users.noreply.github.com'
      - name: Store current versions
        id: current
        run: |
          stable="./$(cat tags.json | jq -r '.stable | join("/")')"
          beta="./$(cat tags.json | jq -r '.beta | join("/")')"
          echo "current stable: $stable, current beta: $beta"
          echo "::set-output name=stable::$stable"
          echo "::set-output name=beta::$beta"
      - name: Check for bedrock docs update
        id: docs-updated
        run: |
          echo "deno version: $(deno -V)"
          output="$(deno run --unstable --allow-net --allow-read --allow-write --quiet ./scripts/update.ts)"
          echo "::set-output name=result::$output"
          echo "result: $output"
      - name: Push to GitHub
        id: github-push
        if: ${{ !fromJSON(steps.docs-updated.outputs.result).error && (fromJSON(steps.docs-updated.outputs.result).update.stable.updated || fromJSON(steps.docs-updated.outputs.result).update.beta.updated) }}
        run: |
          # copy the files from the older version
          msg=""
          if [ "${{ fromJSON(steps.docs-updated.outputs.result).update.stable.updated }}" == "true" ]; then
            echo "copying the previous stable version files"
            cp -vr ${{ steps.current.outputs.stable }} ${{ fromJSON(steps.docs-updated.outputs.result).update.stable.path }}
            msg="Stable ${{ fromJSON(steps.docs-updated.outputs.result).update.stable.name }}"
          fi

          if [ "${{ fromJSON(steps.docs-updated.outputs.result).update.beta.updated }}" == "true" ]; then
            echo "copying the previous beta version files"
            cp -vr ${{ steps.current.outputs.beta }} ${{ fromJSON(steps.docs-updated.outputs.result).update.beta.path }}
            if [ -n "$msg" ]; then
              msg="${msg}, "
            fi
            msg="${msg}Beta ${{ fromJSON(steps.docs-updated.outputs.result).update.beta.name }}"
          fi

          if [ -n "$msg" ]; then
            echo "commit message: $msg"
            echo "::set-output name=msg::$msg"
          fi

          # commit with the previous version
          git add --all
          git commit -m "Copy previous version files for \"$msg\""

          # now we actually copy the new files and commit, to generate diff
          echo "copying the latest files"
          cp -vr ./scripts/out/* .
          git add --all
          git commit -m "Docs update: $msg"
          git push
      - name: Archive documentation files
        if: steps.github-push.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.github-push.outputs.msg }}
          path: scripts/out
      - name: Upload resources and behaviours to S3
        if: steps.github-push.outcome == 'success'
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'
          SOURCE_DIR: 'scripts/cache'
      - name: Update packs repo
        if: steps.github-push.outcome == 'success'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Update Pack Files
          repo: bedrock-dot-dev/packs
          token: ${{ secrets.PERSONAL_TOKEN }}
          inputs: '{ "beta": "${{ fromJSON(steps.docs-updated.outputs.result).update.beta.updated }}", "stable": "${{ fromJSON(steps.docs-updated.outputs.result).update.stable.updated }}", "msg": "${{ steps.github-push.outputs.msg }}" }'
      - name: Deploy site
        if: steps.github-push.outcome == 'success'
        env:
          VERCEL_DEPLOY_HOOK: ${{ secrets.VERCEL_DEPLOY_HOOK }}
        run: |
          # sleep for a bit for GitHub's cache
          sleep 30s
          curl -X POST $VERCEL_DEPLOY_HOOK
